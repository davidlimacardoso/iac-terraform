name: Provisionning IaC
'on':
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  # TF_VAR_env: ${{ github.event.inputs.env }}
  BUKET_TF_STATE: ${{ secrets.BUKET_TF_STATE }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}-${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/stage' && 'stg' || github.ref == 'refs/heads/developer' && 'dev'}}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }} 

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  terraform:
    name: Apply Terraform Code Changes
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Authenticate in the AWS
        uses: aws-actions/configure-aws-credentials@v4
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform with specifc version on the runner
        uses: hashicorp/setup-terraform@v3
        # with:
        #   terraform_version: 1.1.7

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${{ secrets.BUCKET_TF_STATE }}"
          -backend-config="key=terraform.tfstate"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate
        
      - name: Terraform Plan
        id: plan
        
        run: terraform plan -no-color -input=false -out planfile -var-file=$BRANCH_NAME.tfvars -out=planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -var-file=$BRANCH_NAME.tfvars -auto-approve -input=false -parallelism=1 planfile

      - name: Get Kube config file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} 
        
      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.0/deploy/static/provider/aws/deploy.yaml